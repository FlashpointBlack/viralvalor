---
description: 
globs: 
alwaysApply: true
---
# Cursor AI Project Operating Rules

## 0. Purpose

These rules guide Cursor AI’s autonomous work on this repository, ensuring continuity, transparency, and manageable iteration.

## 1. Note Directory

* Keep all meta‑notes in `/cursornotes/`. Never write project code here.
* Prefer Markdown (`*.md`) files.

## 2. Initial Statement of Work (SOW)

On first run, create `/cursornotes/00_SOW.md` containing:

1. **Goal** – one‑sentence objective.
2. **Deliverables** – checklist.
3. **Out‑of‑scope** items.
4. **Dependencies**.
5. **Milestones** – numbered; each ≤ 8 work‑hours.
6. **Timeline** (optional).

## 3. Planning Large Projects

For any milestone expected to take > 4 h or change > 400 LOC:

1. Generate `/cursornotes/plan_<milestone‑slug>.md` with:

   * Context / problem statement.
   * Task breakdown → chunks (`step‑xx`) each ≤ 1 h.
   * **Files** to create/modify for every chunk (explicit paths or path‑globs).
   * Tests or acceptance criteria for every chunk.
2. Link that plan from the SOW under the milestone.

## 4. Executing a Chunk

**Before coding**

* Open the plan file and mark the chunk **IN‑PROGRESS**.
* Review the **Files** list; limit edits strictly to those files. Only open or read files outside the list if absolutely necessary for context, and update the plan if new files must be touched.
* Append to `/cursornotes/daily_<YYYY‑MM‑DD>.log`:

  * Timestamp.
  * "Now working on step‑xx: <title>".
  * Files you expect to modify (should match the plan).

**While coding**

* Add inline `TODO:` / `FIXME:` comments sparingly, referencing the chunk id.

**After tests pass**

1. Commit with message:

   ```
   feat(<area>): complete step‑xx – <title>

   refs: /cursornotes/plan_<milestone>.md#step‑xx
   ```
2. In the plan, mark the chunk **DONE** and add a short summary + lessons learned.
3. If the milestone is finished, mark it **DONE** in the SOW and note the next milestone.

## 5. Resuming Work

On startup, parse `/cursornotes/*`:

1. Resume the latest **IN‑PROGRESS** chunk.
2. Else, open the next **TODO** chunk in the earliest active milestone.
3. If no active milestones, prompt for review.

## 6. Naming Conventions

* Files: `00_SOW.md`, `plan_<slug>.md`, `daily_YYYY‑MM‑DD.log`.
* Headings use ATX `###` style.
* Status tags: **TODO**, **IN‑PROGRESS**, **BLOCKED**, **DONE** (bold uppercase).

## 7. House‑Keeping

* Do **NOT** auto‑format or delete human‑written notes.
* Keep note files under version control.
* Purge logs older than 30 days into `/cursornotes/archive/`.

## 8. Safety & Ethics

* Never commit credentials or secrets.
* Ask for confirmation before destructive file ops.

## 9. Templates & Consistency

* When the first instance of a repeatable pattern (e.g., API route, React component, test helper) is completed and confirmed working, save a reference version to `/cursornotes/templates/<template‑name>.md` or `/cursornotes/templates/<template‑name>.<ext>`.
* Every future instance of that pattern must be generated by cloning the reference template, then adjusting only the necessary specifics.
* If a template must evolve, update **both** the reference file **and** all living instances in the codebase within the same milestone, or flag a dedicated refactor milestone.
* Document deviations; untracked divergence is **not allowed**.

## 10. Admin Self‑Test & Regression Verification

* **Goal:** ensure every potentially breaking change is immediately validated through the admin self‑test page, mirroring real user interactions. we do not use jest. we run these small tests under the following rules, particularly impoart is the rule for invoking code:
* After completing any chunk that modifies business logic, database schema, UI wiring, or external interfaces, *add or update* a corresponding test block on the admin self‑test page **before** marking the chunk **DONE**.
* Invoke the code under test **exactly as** the production control (button, route, API call, CLI wrapper) would—same function signature, parameters, and module context. No mocks or wrappers that change the calling semantics.
* Commit the self‑test update in the *same commit* as the code change (or an immediate follow‑up commit within the chunk) with `test(admin):` prefix and reference to the chunk id.
* If a reusable pattern emerges, save a template for the self‑test block in `/cursornotes/templates/selftest_<pattern>.md` and reuse it.
* Missing or outdated self‑tests constitute a **BLOCKER** and must be resolved before advancing milestones.

---

### Checklist Template (copy into plan file)

```markdown
### step‑00: <title>  **TODO**
- Goal:
- Files: <path(s)>
- Acceptance tests:
- Est. time: < 1 h
```

End of rules.

