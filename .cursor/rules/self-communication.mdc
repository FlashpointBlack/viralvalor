---
description: 
globs: 
alwaysApply: true
---
# Cursor AI Project Operating Rules

## 0. Purpose

These rules guide Cursor AI’s autonomous work on this repository, ensuring continuity, transparency, and manageable iteration.

## 1. Note Directory

* Keep all meta‑notes in `/cursornotes/`. Never write project code here.
* Prefer Markdown (`*.md`) files.

## 2. Initial Statement of Work (SOW)

On first run, create `/cursornotes/##_<Statement of work slug>/SOW.md`. Increase the index of ## by evaluating existing folders present. SOW.md must contain:

1. **Goal** – one‑sentence objective.
2. **Deliverables** – checklist.
3. **Out‑of‑scope** items.
4. **Dependencies**.
5. **Milestones** – numbered; each ≤ 8 work‑hours.

## 3. Planning Larger Projects
For every milestone:

1. Generate `/cursornotes/##_<Statement of work slug>/M#_<milestone slug>.md` where M# represents the milestone number. This file must include:

   * Context / problem statement.
   * Task breakdown → chunks (`step‑x`) each with an estimated time of ≤ 1 h.
   * **Files** to create/modify for every chunk (explicit paths or path‑globs). Please do your research here, This will serve as a roadmap for which files we're allowing to be edited. it should be very restrictive, based only on what is necessary to complete the project.
   * Acceptance criteria for every chunk.
2. Link that plan from the SOW under the milestone.

## 4. Executing a Chunk

**Before coding**

* Open the plan file and mark the chunk **IN‑PROGRESS**.
* Review the **Files** list; limit edits strictly to those files. Only open or read files outside the list if absolutely necessary for context, and update the plan if new files must be touched. Consider implications of your actions especially closely when dealing with files not included in the milestone list.
* Append to `/cursornotes/##_<Statement of work slug>/notes/M#.md`:

  * Timestamp. Verify with the system time when possible.
  * "Now working on M# step‑xx: <title>".
  * Files you expect to modify (should match the plan).

**While coding**

* Add inline `TODO:` / `FIXME:` comments sparingly, but when necessary referencing the chunk id.
* If you will be making many similar edits, denote the first file you are working on as the template file. Other files should match the appropriate layout to fall in line with this layout, and the layout name/location should be notated in your updates.

**After tests pass**

1. Commit with message:

   ```
   feat(<area>): complete step‑xx – <title>

   refs: /cursornotes/plan_<milestone>.md#step‑xx
   ```
2. In the plan, mark the chunk **DONE** and add a short summary + lessons learned.
3. If the milestone is finished, mark it **DONE** in the SOW and note the next milestone.
4. If the milestone is finished, summarize all the notes you wrote about the actions you took for this milestone and add to the bottom of 'M#_<milestone slug>.md'

## 5. Resuming Work

On startup, parse `/cursornotes/*`:

1. Resume the latest **IN‑PROGRESS** chunk.
2. Else, open the next **TODO** chunk in the earliest active milestone.
3. If no active milestones, prompt for review.

## 6. Naming Conventions

* Files: `SOW.md`, `M#_<milestone slug>.md`, `/notes/M#.md`.
* Headings use ATX `###` style.
* Status tags: **TODO**, **IN‑PROGRESS**, **BLOCKED**, **DONE** (bold uppercase).

## 7. House‑Keeping

* Do **NOT** auto‑format or delete human‑written notes.
* Keep note files under version control.
* Purge logs older than 30 days into `/cursornotes/archive/`.

## 8. Safety & Ethics

* Never commit credentials or secrets.
* Ask for confirmation before destructive file ops.

## 9. Templates & Consistency

* When the first instance of a repeatable pattern (e.g., API route, React component, test helper) is completed and confirmed working, save a reference version to `/cursornotes/templates/<template‑name>.md` or `/cursornotes/templates/<template‑name>.<ext>`.
* Every future instance of that pattern must be generated by cloning the reference template, then adjusting only the necessary specifics.
* If a template must evolve, update **both** the reference file **and** all living instances in the codebase within the same milestone, or flag a dedicated refactor milestone.
* Document deviations; untracked divergence is **not allowed**.

---

### Checklist Template (copy into plan file)

```markdown
### step‑00: <title>  **TODO**
- Goal:
- Files: <path(s)>
- Acceptance tests:
- Template: 
```

