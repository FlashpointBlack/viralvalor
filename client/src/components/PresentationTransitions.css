/* 
 * PresentationTransitions.css
 * Handles transitions between different presentation views
 */

:root {
  --transition-duration: 1.5s; /* Match with TRANSITION_DURATION in PresentationDisplayHost.js */
}

.presentation-display-container {
  position: relative; /* Needed for absolute positioning of children */
  width: 100%;
  height: 100vh;
  overflow: hidden; /* Prevent scrollbars if content overflows during transition */
  background-color: #000; /* Add black background to match encounter-display */
}

.slide-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  will-change: opacity; /* Optimize for opacity changes */
  /* Ensure children can define background, e.g. if they have their own */
  /* background-color: transparent; */ 
}

/* Stable, visible slide when not transitioning */
.slide-active {
  opacity: 1;
  z-index: 1;
}

/* The new slide that is entering. It is underneath the exiting slide and should be fully opaque. */
.slide-entering {
  opacity: 1; /* Fully visible under exiting slide */
  z-index: 1;
  /* No animation for entering slide: it's revealed when exiting slide fades */
}

/* The old slide that is on top and fades out */
.slide-exiting {
  opacity: 1;
  z-index: 2;
  animation: fadeOutAnimation var(--transition-duration) forwards ease-in-out;
  pointer-events: none;
}

/* @keyframes fadeInAnimation - NO LONGER NEEDED
  0% { opacity: 0; }
  100% { opacity: 1; }
} */

@keyframes fadeOutAnimation {
  from { opacity: 1; }
  to   { opacity: 0; }
}

/* Add styles to help stabilize rendering on the exiting slide */
/* JavaScript handles the actual text scaling; these are for render stability. */
.slide-exiting .encounter-title,
.slide-exiting .encounter-description {
  transform: translateZ(0); /* May help promote to own layer / prevent jitter */
  -webkit-font-smoothing: subpixel-antialiased; /* Attempt to stabilize font rendering */
}

/* Ensure the components rendered by renderView fill their container and are visible */
.slide-container > * { /* Target direct children of slide-container */
  width: 100%;
  height: 100%;
  opacity: 1; /* Make sure the content within the slide container is visible */
  /* display: flex; flex-direction: column; if needed for layout within */
}

/* End of active transition styles */

/*
  The following styles are from the old implementation or are view-specific.
  They might need to be reviewed or adapted if specific animations beyond the standard fade are required.
*/

/* Old .presentation-view rules - REMOVED as they are replaced by .slide-container and its variants */
/*
.presentation-view {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  will-change: opacity;
  opacity: 1;
  overflow: hidden;
}

.presentation-view.current {
  z-index: 100; 
  opacity: 1;
}

.presentation-view.previous {
  z-index: 200; 
  opacity: 1;
}

.presentation-view.previous.fade-out {
  animation: viewFadeOut var(--transition-duration) forwards ease-in-out;
  pointer-events: none; 
}

@keyframes viewFadeOut {
  0% { opacity: 1; }
  100% { opacity: 0; }
}

.presentation-view.current {
  animation: viewFadeIn 0.3s ease-in-out;
}

@keyframes viewFadeIn {
  0% { opacity: 0.3; }
  100% { opacity: 1; }
}
*/

/* View-specific adjustments - these might need review */
/*
.welcome-view {
}

.encounter-view {
}

.end-view {
}

.end-view.current {
  animation: endViewEnter 0.2s ease-in;
}

@keyframes endViewEnter {
  0% { opacity: 0.2; transform: scale(0.98); }
  100% { opacity: 1; transform: scale(1); }
}

.encounter-view.previous.fade-out + .end-view.current {
  animation: endViewReveal var(--transition-duration) ease-in-out;
}

@keyframes endViewReveal {
  0% { opacity: 0.2; }
  30% { opacity: 0.5; }
  100% { opacity: 1; }
}

.encounter-view .encounter-container.previous.fade-out {
  z-index: 150; 
}

.presentation-view {
  z-index: 10; 
}
*/ 