<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

  <title>Simple Chat</title>
  <style>
    html,
    body {
      height: 100%;
      margin: 0px;
      display: flex;
      flex-direction: column;
      font-size: 16px;
      /* Adjust base font size as needed */
    }

    #header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      /* Add some padding */
      font-size: 2rem;
      /* Responsive font size */
    }

    #chatDiv {
      flex-grow: 1;
      overflow: auto;
      width: 100%;
    }

    #inputArea {
      display: flex;
      padding: 10px;
      /* Add some padding */
    }

    #messageBox {
      flex-grow: 1;
      font-size: 1rem;
      /* Responsive font size */
      margin: 8px;
    }

    #sendButton {
      margin-left: 10px;
      font-size: 1rem;
      /* Responsive font size */
      padding: 8px 12px;
      /* Add some padding */
    }

    #onlineCount {
      font-size: 1rem;
      /* Responsive font size */
    }

    .message {
      padding-left: 5px;
      padding-right: 5px;
      padding-top: 1px;
      padding-bottom: 1px;
      margin: 2px;
      border-radius: 5px;
      width: calc(100% - 14px);
      background-color: #007AFF;
      /* Light grey background */
      font-size: 1rem;
      /* Responsive font size */
    }

    .systemmessage {
      padding-left: 5px;
      padding-right: 5px;
      padding-top: 1px;
      padding-bottom: 1px;
      margin-top: 2px;
      margin-bottom: 2px;
      margin-left: 20px;
      margin-right: 20px;
      border-radius: 5px;
      width: calc(100% - 54px);
      background-color: #DDD;
      /* Light grey background */
      font-size: .8rem;
      /* Responsive font size */
      text-align: center
    }

    .timestamp {
      font-size: .5rem;
      color: #666;
      /* Dark grey text */
    }

    #chatDiv {
      display: flex;
      width: 100%;
      height: 100%;
      /* Adjust as necessary */
    }

    #messages {
      flex-grow: 1;
      overflow-y: auto;
      /* Add padding, margins, or borders as desired */
    }

    #userList {
      width: 200px;
      /* Or whatever width you prefer */
      overflow-y: auto;
      border-left: 1px solid #ccc;
      /* A light border line */
      font-size: .8rem;
    }

    ul {
      list-style-type: none;
    }

    #quizDiv {
      position: fixed;
      /* Position it over everything */
      top: 0;
      /* Start from top */
      left: 0;
      /* Start from left */
      width: 100%;
      /* Full width */
      height: 100%;
      /* Full height */
      background-color: rgba(0, 0, 0, 0.5);
      /* Semi-transparent black background */
      z-index: 1000;
      /* Ensure it's on top of other elements */
      display: flex;
      /* Use flexbox for centering */
      justify-content: center;
      /* Center horizontally */
      align-items: center;
      /* Center vertically */
      color: #FFF;
      /* White text color */
      display: flex;
      flex-direction: column;
      /* Stack children vertically */
    }

    #questionText {
      margin-bottom: 20px;
      /* Space between question and options */
    }

    .wrapper {
      display: grid;
      grid-template-columns: repeat(8, 1fr);
      gap: 15px;
      grid-template-areas:
        "a a a a b b b b"
        "a a a a b b b b"
        "c c c c d d d d"
        "c c c c d d d d";
      align-items: start;
    }

    .item1 {
      grid-area: a;
    }

    .item2 {
      grid-area: b;
    }

    .item3 {
      grid-area: c;
    }

    .item4 {
      grid-area: d;
    }
    .quiz-option-button {
    margin: 0.5em;
    padding: 0.5em 1em;
    font-size: 2em;
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
}
    /* Style for buttons, if necessary */
    .wrapper button {
      width: 100%;
      height: 100%;
    }
  </style>
  <script src="socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const socket = io('https://www.viralvalor.com/');
      const messageBox = document.getElementById('messageBox');
      const sendButton = document.getElementById('sendButton');
      const chatDiv = document.getElementById('chatDiv');
      const onlineCountDiv = document.getElementById('onlineCount');
      // On Connect
      socket.on('connect', () => {
        socket.emit('new user', {
          sub: userSub
        });
      });
      socket.on('user count', (count) => {
        onlineCountDiv.innerHTML = 'Users Online: ' + count;
      });
      socket.on('new quiz', (quiz) => {
        displayQuiz(quiz);
      });
      socket.on('end quiz', () => { // Code to close the quiz interface
        const quizDiv = document.getElementById('quizDiv');
        if (quizDiv) {
          quizDiv.remove();
        }
      });
      socket.on('receive message', (data) => {
        const messageParagraph = document.createElement('p');
        messageParagraph.className = 'message'; // Add a class name to the paragraph
        const date = new Date(data.timestamp);
        const formattedTime = date.toLocaleTimeString();
        messageParagraph.innerHTML = `<strong>${
            data.name
        }</strong>: ${
            data.message
        } <span class="timestamp">(${formattedTime})</span>`;
        messages.appendChild(messageParagraph);
        messages.scrollTop = messages.scrollHeight; // Scroll to the latest message
      });
      socket.on('system message', (data) => {
        const messageParagraph = document.createElement('p');
        messageParagraph.className = 'systemmessage'; // Add a class name to the paragraph
        const date = new Date(data.timestamp);
        const formattedTime = date.toLocaleTimeString();
        messageParagraph.innerHTML = `${
            data.message
        } <span class="timestamp">(${formattedTime})</span>`;
        messages.appendChild(messageParagraph);
        messages.scrollTop = messages.scrollHeight; // Scroll to the latest message
      });

      function sendMessage() {
        const message = messageBox.value.trim();
        if (message) { // Check if the message is not empty
          const name = userName || 'Anonymous'; // Use the userName from the server
          const timestamp = Date.now();
          socket.emit('send message', {
            name,
            message,
            timestamp
          }); // Send message to server
          messageBox.value = ''; // Clear the message box
        }
      }

      function displayQuiz(quiz) {
        const questionTextDiv = document.createElement('div');
        questionTextDiv.id = 'questionText';
        questionTextDiv.innerHTML = `<p>${quiz.text}</p>`; // Display the quiz question

        const questionDiv = document.createElement('div');
        questionDiv.id = 'quizDiv';
        questionDiv.appendChild(questionTextDiv);

        // Create a container for the options
        const optionsContainer = document.createElement('div');
        optionsContainer.className = 'options-container';

        // Dynamically create and append each option as a button
        quiz.options.forEach((option, index) => {
          const button = document.createElement('button');
          button.textContent = option;
          button.onclick = () => sendQuizResponse(quiz.id, index);
          button.className = `quiz-option-button`; // Add a class for styling
          optionsContainer.appendChild(button);
        });

        questionDiv.appendChild(optionsContainer);
        document.body.appendChild(questionDiv);
      }

      function sendQuizResponse(quizId, selectedOption) {
        socket.emit('quiz response', {
          quizId,
          selectedOption
        });
      }
      socket.on('update user list', (users) => {
        const usersList = document.getElementById('users');
        usersList.innerHTML = ''; // Clear the current list
        users.forEach((user) => {
          const userElement = document.createElement('li');
          userElement.textContent = user;
          usersList.appendChild(userElement);
        });
      });
      sendButton.addEventListener('click', sendMessage);
      messageBox.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          sendMessage();
          e.preventDefault(); // Prevent the default action to stop from actually inserting a newline
        }
      });
    });
  </script>
</head>

<body>
  <div id="header">
    <div>
      <script>
        var userName = '<%= userDetails.name %>';
        var userSub = '<%= userDetails.sub %>';
      </script>
    </div>
  </div>
  <div id="chatDiv">
    <div id="messages" style="flex-grow: 1; overflow-y: auto;"></div>
    <div id="userList" style="width: 200px; overflow-y: auto;">
      <h3><u>
          <center>
            <div id="onlineCount">0</div>
          </center>
        </u></h3>
      <ul id="users"></ul>
    </div>
  </div>


  <div id="inputArea">
    <input type="text" id="messageBox" placeholder="Type a message...">
    <button id="sendButton">Send</button>
  </div>
</body>

</html>