<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Edit Quiz</title>
  <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/admin.css">

  <script src="socket.io/socket.io.js"></script>

  <script>
    // Declare Globals
    var globalRoutes = [];
    var globalResults; // Declare this in a global scope
    var userName = '<%= userDetails.name %>';
    window.userSub = '<%= userDetails.sub %>';

    var socket, QuizSendBtn, QuizEndBtn, QuizUpdateBtn, NavigationLivePollBtn, NavigationChatBtn, FileEncounterBackdropUpload, CharacterImageUpload;
  </script>
</head>


<body>
  <div id="notificationBar"><b><span id="UserNotificationText">Quiz updated!</span></b></div>
  <div class="container">
    <div class="Header">
      <button type="button" id="NavigationChatBtn" class="btn header-button">Chat</button>
      <button type="button" id="NavigationLivePollBtn" class="btn header-button">Live Polling</button>
      <button type="button" id="NavigationStoryLineBtn" class="btn header-button">Storyline</button>
      <button type="button" id="NavigationBadgesBtn" class="btn header-button">Badges</button>
      <button type="button" id="NavigationCharactersBtn" class="btn header-button">Characters</button>
      <button type="button" id="NavigationBackdropsBtn" class="btn header-button">Backdrops</button>
      <!-- <button id="showImagesBtn" class="btn">Popup Test</button> -->

      <div id="BrowsePrevious" class="popup" style="display:none;">
        <div class="Title">This is a test title</div>
        <div class="ItemList">
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder<br><br>
          Placeholder
        </div>
      </div>

      <div id="imagePopup" class="popup" style="display:none;">

      </div>
    </div>
    <div class="Footer"></div>
    <div class="Navigation"></div>
    <div class="InterfaceBody">
      <div class="InterfaceHeader"></div>
      <div class="LivePolling" id="LivePolling">
        <div class="PollingQuestions">
          <div class="question-block">
            <!-- <form id="quizForm" action="/update-quiz" method="POST"> -->
            Question To Send
            <input type="text" id="question" name="question[text]" value="<%= currentQuiz.text %>" required>

            <div id="optionsContainer">
              <% currentQuiz.options.forEach((option, oIndex) => { %>
              <div class="option-input" id="optionInput<%= oIndex %>">
                <label for="option<%= oIndex %>">Option <%= oIndex + 1 %>:</label>
                <input type="text" name="question[options][<%= oIndex %>]" value="<%= option %>" required>
                <button type="button" onclick="QuizRemoveOption('<%= oIndex %>')">Delete</button>
              </div>
              <% }); %>
            </div>

            <button type="button" id="QuizAddOptionBtn">Add Option</button>

            <label for="correct">Correct Answer:</label>
            <select id="correct" name="question[correct]">
              <% currentQuiz.options.forEach((_, oIndex) => { %>
              <option value="<%= oIndex %>" <%= currentQuiz.correct === oIndex ? 'selected' : '' %>>Option <%= oIndex + 1 %></option>
              <% }); %>
            </select>

            <button type="button" id="QuizSendBtn" class="btn">Send Quiz to Everyone</button>
            <button type="button" id="QuizEndBtn" class="btn">End Quiz</button>
            <button type="button" class="btn" id="QuizUpdateBtn">Update Quiz</button>

            <!-- </form> -->
            questions
          </div>
        </div>
        <div class="PollingResults">
          Live Quiz Results
          <div id="VotesTotal"></div>
          <div id="resultsChart">
            <!-- Empty container where the bars will be dynamically inserted -->
          </div>
        </div>

      </div>
      <div id="StoryLine" class="StoryLine">
        <table border="2" width="100%">
          <tr>
            <td colspan="2">
              <button onclick="EncounterCreateBlank(window.userSub)" class="btn header-button">Create a New Unlinked Encounter</button>
              <button onclick="EncounterLoad(108)" class="btn header-button">Load sample encounter</button>

            </td>
          </tr>
          <tr>
            <td width="33%" height="170px">
              <form id="EncounterForm">
                <div id="EncounterForm" class="EncounterForm">
                  <input type="text" id="EncounterTitle" placeholder="Encounter Title" class="WidthFull" data-dbc="Title"><br>
                  <textarea id="EncounterDescription" placeholder="Encounter Description" class="WidthFull" data-dbc="Description"></textarea><br>
                </div>
              </form>
            </td>
            <td width="66%">
              <button id="AddEncounterChoiceBtn" onclick="RouteCreate()">Add Choice</button>
              <div id="EncounterRoutesContainer"></div>
            </td>
          </tr>
          <tr>
            <td colspan=2>
              <center>
                <table border="4">
                  <tr>
                    <th>Backdrop Image:</th>
                    <th>Character 1:</th>
                    <th>Character 2:</th>
                  </tr>
                  <tr>
                    <td><button onclick="SelectBackdrop()" class="btn header-button">Select Backdrop</button></td>
                    <td><button onclick="SelectCharacter(1)" class="btn header-button">Select Character</button></td>
                    <td><button onclick="SelectCharacter(2)" class="btn header-button">Select Character</button></td>
                  </tr>
                  <tr>
                    <td><span id='ImageBackdrop'></span></td>
                    <td><span id='ImageCharacter1'></span></td>
                    <td><span id='ImageCharacter2'></span></td>
                  </tr>
                </table>
              </center>

            </td>
          </tr>
        </table>
      </div>
      <div id="ChatWindow" class="ChatWindow">chat goes here</div>
      <div id="BadgesWindow" class="BadgesWindow">
        <table border="1" width="100%" height="100%">
          <tr>
            <td width="50%">
              List Of Badges
            </td>
            <td width="50%">Current Badge Details</td>
          </tr>
          <tr>
            <td>
              Upload New Badge: <input type="file" id="BadgeImageUpload" data-dbc="ImageBadge" class="FileInput" /><br>
              <button onclick="UpdateBadgesList()">Refresh</button>
              <div id="badgesListContainer" class="badges-list-container">
                <!-- Badges will be added here dynamically -->
              </div>

            </td>
            <td>
              <div id="SelectedBadgeVitals">
                <form id="BadgeForm">
                  <center>
                    <span id="BadgeImage"></span><br>
                    Title: <input placeholder="Badge Title" class="WidthFull" type="text" id="BadgeTitle" data-dbc="Title"><br>
                    Description: <textarea id="BadgeDescription" placeholder="Badge Description" class="WidthFull" data-dbc="Description"></textarea><br>
                  </center>
                </form>
              </div>
            </td>
          </tr>
        </table>
      </div>
      <div id="CharacterModelsWindow" class="CharacterModelsWindow">
        <table border="1" width="100%" height="100%">
          <tr>
            <td width="50%">
              Available Characters
            </td>
            <td width="50%">Selected Character Model Details</td>
          </tr>
          <tr>
            <td>
              Upload New Character: <input type="file" id="CharacterImageUpload" data-dbc="ImageCharacter" class="FileInput" /><br>
              <button onclick="UpdateCharacterList()">Refresh</button>
              <div id="characterListContainer" class="characters-list-container">
                <!-- Characters will be added here dynamically -->
              </div>
            </td>
            <td>
              <div id="SelectedCharacterVitals">
                <form id="CharacterForm">
                  <center>
                    <span id="CharacterImage"></span><br>
                    Title: <input placeholder="Character Title" class="WidthFull" type="text" id="CharacterTitle" data-dbc="Title"><br>
                    Description: <textarea id="CharacterDescription" placeholder="Character Description" class="WidthFull" data-dbc="Description"></textarea><br>
                  </center>
                </form>
              </div>
            </td>
          </tr>
        </table>
      </div>
      <div id="BackdropsWindow" class="BackdropsWindow">
        <table border="1" width="100%" height="100%">
          <tr>
            <td width="50%">
              Available Backdrops
            </td>
            <td width="50%">Selected Backdrop Details</td>
          </tr>
          <tr>
            <td>
              Upload New Backdrop: <input type="file" id="BackdropImageUpload" data-dbc="ImageBackdrop" class="FileInput" /><br>
              <button onclick="UpdateBackdropList()">Refresh</button>
              <div id="backdropListContainer" class="backdrops-list-container">
                <!-- Characters will be added here dynamically -->
              </div>
            </td>
            <td>
              <div id="SelectedBackdropVitals">
                <form id="BackdropForm">
                  <center>
                    <span id="BackdropImage"></span><br>
                    Title: <input placeholder="Backdrop Title" class="WidthFull" type="text" id="BackdropTitle" data-dbc="Title"><br>
                    Description: <textarea id="BackdropDescription" placeholder="Backdrop Description" class="WidthFull" data-dbc="Description"></textarea><br>
                  </center>
                </form>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </div>
  </div>
  </div>


  <script>
    // Badges: Load
    function BadgeLoad(BadgeID) { // retrieves the encounter data from the server, then calls EncounterPopulateRoutes, EncounterPopulateImages, EncounterPopulateVitals, and QuizUpdateWithRoutes
      SelectedBadgeVitals = document.getElementById('SelectedBadgeVitals');
      SelectedBadgeVitals.style.display = 'flex';
      window.BadgeActiveID = BadgeID

      fetch(`/GetBadgeData/${BadgeID}`)
        .then(response => response.json())
        .then(data => {
          BadgePopulate(data);
        })
        .catch(error => console.error('Error fetching encounter data:', error));
    }

    function BadgePopulate(data) { // display the Badge data on the page
      console.log(data);
      Title = data.Title || "";
      Description = data.Description || "";

      const BadgeTitle = document.getElementById('BadgeTitle');
      const BadgeDescription = document.getElementById('BadgeDescription');
      const BadgeImage = document.getElementById('BadgeImage');
      BadgeImage.innerHTML = '<img src="images/uploads/badges/' + data.FileName + '" class="BadgeImageView"/>';

      BadgeTitle.value = Title
      BadgeDescription.value = Description
    }

    function BadgeUpdateField(fieldName, value) { // updates a field in the Badges table
      let dbc = document.getElementById(fieldName).getAttribute('data-dbc');
      console.log('Save the Encounter Field');

      let updateData = {
        id: window.BadgeActiveID,
        field: dbc,
        value: value
      };

      fetch('/update-badge-field', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        })
        .then(response => response.json())
        .then(data => {
          NotifyUser(data.message);
          // Handle UI updates or notifications
        })
        .catch(error => console.error('Error:', error));
    }

    function UpdateBadgesList() { // retrieve all badge info
      fetch('/GetAllBadgesData') // Replace with your actual endpoint
        .then(response => response.json())
        .then(data => {
          DisplayBadgesList(data);
        })
        .catch(error => console.error('Error:', error));
    }

    function DisplayBadgesList(badgeList) { // display all badges
      const listContainer = document.getElementById('badgesListContainer');
      listContainer.innerHTML = ''; // Clear existing list

      badgeList.forEach(badge => {
        let listItem = document.createElement('div');
        listItem.className = 'badge-item';
        listItem.onclick = function() {
          BadgeLoad(badge.ID);
        };

        let image = document.createElement('img');
        image.src = 'images/uploads/badges/' + badge.FileName;
        image.className = 'badge-thumbnail';

        let title = document.createElement('span');
        title.className = 'badge-title';
        title.textContent = badge.Title;

        listItem.appendChild(image);
        listItem.appendChild(title);

        listContainer.appendChild(listItem);
      });
    }


    // Characters: Load
    function CharacterLoad(BadgeID) { // retrieves the encounter data from the server, then calls EncounterPopulateRoutes, EncounterPopulateImages, EncounterPopulateVitals, and QuizUpdateWithRoutes
      SelectedBadgeVitals = document.getElementById('SelectedBadgeVitals');
      SelectedBadgeVitals.style.display = 'flex';
      window.CharacterActiveID = BadgeID

      fetch(`/GetCharacterData/${BadgeID}`)
        .then(response => response.json())
        .then(data => {
          CharacterPopulate(data);
        })
        .catch(error => console.error('Error fetching encounter data:', error));
    }

    function CharacterPopulate(data) { // display the Badge data on the page
      console.log(data);
      Title = data.Title || "";
      Description = data.Description || "";

      const CharacterTitle = document.getElementById('CharacterTitle');
      const CharacterDescription = document.getElementById('CharacterDescription');
      const CharacterImage = document.getElementById('CharacterImage');
      CharacterImage.innerHTML = '<img src="images/uploads/characters/' + data.FileName + '" class="BadgeImageView"/>';

      CharacterTitle.value = Title
      CharacterDescription.value = Description
    }

    function CharacterUpdateField(fieldName, value) { // updates a field in the Characters table
      let dbc = document.getElementById(fieldName).getAttribute('data-dbc');

      let updateData = {
        id: window.CharacterActiveID,
        field: dbc,
        value: value
      };

      fetch('/update-character-field', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        })
        .then(response => response.json())
        .then(data => {
          NotifyUser(data.message);
          // Handle UI updates or notifications
        })
        .catch(error => console.error('Error:', error));
    }

    function UpdateCharacterList() { // retrieve all badge info
      fetch('/GetAllCharacterData') // Replace with your actual endpoint
        .then(response => response.json())
        .then(data => {
          DisplayCharactersList(data);
        })
        .catch(error => console.error('Error:', error));
    }

    function DisplayCharactersList(badgeList) { // display all badges
      const listContainer = document.getElementById('characterListContainer');
      listContainer.innerHTML = ''; // Clear existing list

      badgeList.forEach(badge => {
        let listItem = document.createElement('div');
        listItem.className = 'badge-item';
        listItem.onclick = function() {
          CharacterLoad(badge.ID);
        };

        let image = document.createElement('img');
        image.src = 'images/uploads/characters/' + badge.FileName;
        image.className = 'badge-thumbnail';

        let title = document.createElement('span');
        title.className = 'badge-title';
        title.textContent = badge.Title;

        listItem.appendChild(image);
        listItem.appendChild(title);

        listContainer.appendChild(listItem);
      });
    }

    // Backdrops: Load
    function BackdropLoad(BadgeID) {
      console.log('backdrop load1: ', BadgeID)
      SelectedBadgeVitals = document.getElementById('SelectedBackdropVitals');
      SelectedBadgeVitals.style.display = 'flex';
      window.BackdropActiveID = BadgeID

      fetch(`/GetBackdropData/${BadgeID}`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log("Backdrop load2: ", data);
          BackdropPopulate(data);
        })
        .catch(error => {
          console.error('Error fetching backdrop data:', error);
        });

    }

    function BackdropPopulate(data) { // display the Badge data on the page
      console.log("get backdrop populate: ", data);
      Title = data.Title || "";
      Description = data.Description || "";

      const BackdropTitle = document.getElementById('BackdropTitle');
      const BackdropDescription = document.getElementById('BackdropDescription');
      const BackdropImage = document.getElementById('BackdropImage');
      BackdropImage.innerHTML = '<img src="images/uploads/backdrops/' + data.FileName + '" class="BadgeImageView"/>';

      BackdropTitle.value = Title
      BackdropDescription.value = Description
    }

    function BackdropUpdateField(fieldName, value) { // updates a field in the Characters table

      let dbc = document.getElementById(fieldName).getAttribute('data-dbc');

      let updateData = {
        id: window.BackdropActiveID,
        field: dbc,
        value: value
      };
      console.log(updateData);

      fetch('/update-backdrop-field', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        })
        .then(response => response.json())
        .then(data => {
          NotifyUser(data.message);
          // Handle UI updates or notifications
        })
        .catch(error => console.error('Error:', error));
    }

    function UpdateBackdropList() { // retrieve all badge info
      fetch('/GetAllBackdropData') // Replace with your actual endpoint
        .then(response => response.json())
        .then(data => {
          DisplayBackdropsList(data);
        })
        .catch(error => console.error('Error:', error));
    }

    function DisplayBackdropsList(badgeList) { // display all badges
      console.log("display backdrops: ", badgeList);
      const listContainer = document.getElementById('backdropListContainer');
      listContainer.innerHTML = ''; // Clear existing list

      badgeList.forEach(badge => {
        let listItem = document.createElement('div');
        listItem.className = 'badge-item';
        listItem.onclick = function() {
          BackdropLoad(badge.ID);
        };

        let image = document.createElement('img');
        image.src = 'images/uploads/backdrops/' + badge.FileName;
        image.className = 'badge-thumbnail';

        let title = document.createElement('span');
        title.className = 'badge-title';
        title.textContent = badge.Title;

        listItem.appendChild(image);
        listItem.appendChild(title);

        listContainer.appendChild(listItem);
      });
    }


    // Quizzes
    function QuizSend() {
      socket.emit('send quiz');
    }

    function QuizEnd() {
      socket.emit('end quiz');
    }

    function QuizUpdate() {
      const questionText = document.getElementById('question').value;
      const optionsElements = document.querySelectorAll('.option-input input[type="text"]');
      const options = Array.from(optionsElements).map(option => option.value);
      const correct = parseInt(document.getElementById('correct').value);

      const newQuiz = {
        text: questionText,
        options: options,
        correct: correct
      };

      socket.emit('update quiz', newQuiz);
    }

    function QuizChartUpdate(results, totalvotes, routes = globalRoutes) {
      const resultsChart = document.getElementById('resultsChart');
      const VotesTotal = document.getElementById('VotesTotal');
      resultsChart.innerHTML = ''; // Clear previous results

      results.forEach((percent, index) => {
        const container = document.createElement('div');
        container.classList.add('result-container');

        // Create a button for each route
        const routeButton = document.createElement('button');
        routeButton.textContent = globalRoutes[index].Title;
        routeButton.classList.add('route-button');
        routeButton.onclick = () => {
          // console.log(globalRoutes, globalRoutes[index].RelID_Encounter_Receiving);
          // alert(globalRoutes[index].RelID_Encounter_Receiving);
          socket.emit('select encounter', globalRoutes[index].RelID_Encounter_Receiving);
        };
        container.appendChild(routeButton); // Append the button to the main container

        // Create the bar container
        const barContainer = document.createElement('div');
        barContainer.classList.add('bar-container');

        const bar = document.createElement('div');
        bar.classList.add('bar');
        bar.style.width = '100%'; // Full width for the outer bar

        const innerBar = document.createElement('div');
        innerBar.classList.add('inner-bar');
        innerBar.id = `bar${index}`;
        innerBar.style.width = `${percent}%`; // Width based on percent
        innerBar.textContent = `${percent}%`;

        var correctIndex = document.getElementById('correct').value; // Assuming you have this element
        innerBar.classList.add(index == correctIndex ? 'correct-bar' : 'incorrect-bar');

        bar.appendChild(innerBar); // Append the inner bar to the bar
        barContainer.appendChild(bar); // Append the bar to its container
        container.appendChild(barContainer); // Append the bar container to the main container

        resultsChart.appendChild(container); // Append the main container to the chart

      });
      VotesTotal.innerHTML = totalvotes + " votes total"
    }

    function QuizUpdateWithRoutes(routes) { // sets the quiz questions to the Route options for MMO group play
      const newOptions = routes.map(route => route.Title); // Assuming each route has a 'title' property
      const newQuiz = {
        text: "Select the next step:", // Or any other relevant question text
        options: newOptions,
        correct: 0 // Update this as needed
      };

      socket.emit('update quiz', newQuiz); // Send the new quiz to the server
    }

    function QuizAddOption() { // Modifies the display to allow for another livepolling option
      const optionsContainer = document.getElementById('optionsContainer');
      const optionIndex = optionsContainer.children.length;
      const optionDiv = document.createElement('div');
      optionDiv.className = 'option-input';
      optionDiv.id = `optionInput${optionIndex}`;

      optionDiv.innerHTML = `
        <label for="option${optionIndex}">Option ${optionIndex + 1}:</label>
        <input type="text" name="question[options][${optionIndex}]" required>
        <button type="button" onclick="QuizRemoveOption('${optionIndex}')">Delete</button>
    `;

      optionsContainer.appendChild(optionDiv);
      QuizUpdateDropdownChoices();
    }

    function QuizRemoveOption(index) { // Removes the current livepoll option
      const optionDiv = document.getElementById(`optionInput${index}`);
      if (optionDiv) {
        optionDiv.remove();
      }
      QuizUpdateDropdownChoices();
    }

    function QuizUpdateDropdownChoices() { // updates the "correct answer" dropdown to reflect the currently available choices after they have been modified
      const correctSelect = document.getElementById('correct');
      correctSelect.innerHTML = ''; // Clear existing options

      const options = document.querySelectorAll('.option-input');
      options.forEach((_, index) => {
        const option = document.createElement('option');
        option.value = index;
        option.textContent = `Option ${index + 1}`;
        correctSelect.appendChild(option);
      });
    }


    // Story Line -> Routes
    function RouteCreate() { // sends a request to the server to create a new blank record. retrieves the ID of the newly created record and calls addEncounterChoiceHTML() to display
      let EncounterID = window.EncounterActiveID; // Ensure this is set correctly
      let UserSub = window.userSub; // Ensure this holds the user identifier

      fetch('/create-encounter-choice', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            EncounterID,
            UserSub
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.ID) {
            addEncounterChoiceHTML(data.ID);
          } else {
            console.error('Choice creation failed');
          }
        })
        .catch(error => console.error('Error:', error));
    }

    function addEncounterChoiceHTML(choiceID, title = "", relIdEncounterReceiving = null) { // displays a newly created encounter Route for the user to edit
      let container = document.getElementById("EncounterRoutesContainer");

      let choiceDiv = document.createElement("div");
      choiceDiv.className = 'EncounterChoice';
      choiceDiv.setAttribute('data-id', choiceID);

      let buttonHTML;
      if (relIdEncounterReceiving) {
        buttonHTML = `
            <button onclick="EncounterLoad(${relIdEncounterReceiving})">Follow</button>
            <button onclick="RouteSetReceivingEncounter('', ${choiceID})">Unlink</button>`;
      } else {
        buttonHTML = `
            <button onclick="EncounterFetchUnlinked(this, ${choiceID})">Link</button>
            <button onclick="EncounterCreateNewFromCurrent(window.EncounterActiveID, window.userSub, ${choiceID})">New</button>`;
      }

      let linkButtonContainer = `<div class="unlinked-encounters-list">${buttonHTML}</div>`;

      choiceDiv.innerHTML = `
        <div class="encounter-choice-row">
            Route Name: <input type="text" value="${title}" placeholder="Path Title" onchange="RouteUpdateTitle(this, ${choiceID})">
            ${linkButtonContainer}
            <button onclick="EncounterRouteDelete(this, ${choiceID})">Delete</button>
        </div>
    `;

      container.appendChild(choiceDiv);
    }

    function RouteUpdateTitle(inputElement, choiceID) { // Called when editing the Route Title
      // this may not be used
      let updatedTitle = inputElement.value;
      let updateData = {
        ID: choiceID,
        Title: updatedTitle
      };

      fetch('/update-encounter-choice', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        })
        .then(response => response.json())
        .then(data => {
          console.log(1);
        })
        .catch(error => console.error('Error:', error));
    }

    function RouteSetReceivingEncounter(selectedEncounter, RouteID) { // assign an encounter as a desination for a route
      let selectedEncounterID;

      // Check if selectedEncounter is an object (has property 'ID') or a digit
      if (typeof selectedEncounter === 'object' && selectedEncounter !== null && 'ID' in selectedEncounter) {
        selectedEncounterID = selectedEncounter.ID;
      } else if (typeof selectedEncounter === 'number') {
        selectedEncounterID = selectedEncounter;
      } else {
        console.error('Invalid selectedEncounter:', selectedEncounter);
        return;
      }

      fetch('/set-receiving-encounter', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            RouteID,
            selectedEncounterID
          })
        })
        .then(response => response.json())
        .then(data => {
          EncounterRoutesUpdateDisplayedOptions(RouteID, selectedEncounterID)
          // Optionally update the UI to reflect the linked encounter
        })
        .catch(error => console.error('Error:', error));
    }

    function EncounterRoutesUpdateDisplayedOptions(choiceID, relIdEncounterReceiving) { // edits the buttons next to a Route. used to update available options when applicable
      console.log('updating...');
      let choiceDiv = document.querySelector(`.EncounterChoice[data-id='${choiceID}']`);
      if (choiceDiv) {
        let buttonHTML = relIdEncounterReceiving ?
          `<button onclick="EncounterLoad(${relIdEncounterReceiving})">Follow</button>
               <button onclick="RouteSetReceivingEncounter('',${choiceID})">Unlink</button>` :
          `<button onclick="EncounterFetchUnlinked(this, ${choiceID})">Link</button>
          <button onclick="EncounterCreateNewFromCurrent(window.EncounterActiveID, window.userSub, ${choiceID})">New</button>`;

        let buttonContainer = choiceDiv.querySelector('.unlinked-encounters-list');
        if (buttonContainer) {
          buttonContainer.innerHTML = buttonHTML;
        }
      }
    }

    function EncounterRouteDelete(buttonElement, choiceID) { // delete encounter Route
      fetch('/delete-encounter-choice', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            ID: choiceID
          })
        })
        .then(response => response.json())
        .then(data => {
          console.log(data.message);
          buttonElement.parentElement.remove(); // Remove the choice div from the UI
        })
        .catch(error => console.error('Error:', error));
    }


    // Story Line -> Encounters: Creation
    function EncounterCreateNewFromCurrent(encounterId, userSub, RouteID) { // called from "New" button created by addEncounterChoiceHTML(). Copies current Encounter Details. TODO: Set encounter title to previous route title
      fetch('/duplicateEncounter', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            encounterId: encounterId,
            userSub: userSub
          })
        })
        .then(response => response.json())
        .then(data => {
          console.log('New Encounter ID:', data.newEncounterId);
          RouteSetReceivingEncounter(data.newEncounterId, RouteID)
          EncounterLoad(data.newEncounterId);
          // Handle the new encounter ID as needed
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    function EncounterCreateBlank(userSub) { // Creates a root encounter. A new story.
      fetch('/create-blank-encounter', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            userSub: userSub
          })
        })
        .then(response => response.json())
        .then(data => {
          window.EncounterActiveID = data.encounterId;
          EncounterLoad(window.EncounterActiveID)
        })
        .catch(error => console.error('Error:', error));
    }


    // Story Line -> Encounter: Loading
    function EncounterLoad(encounterId) { // retrieves the encounter data from the server, then calls EncounterPopulateRoutes, EncounterPopulateImages, EncounterPopulateVitals, and QuizUpdateWithRoutes
      window.EncounterPreviousID = window.EncounterActiveID;
      window.EncounterActiveID = encounterId;
      let container = document.getElementById("EncounterRoutesContainer");
      container.innerHTML = '';

      fetch(`/GetEncounterData/${encounterId}`)
        .then(response => response.json())
        .then(data => {
          // console.log(data);
          console.log(data.Encounter);
          globalRoutes = data.EncounterRoutes; // Update the global variable
          EncounterPopulateRoutes(data.EncounterRoutes);
          // EncounterPopulateImages(data.Encounter[0], data.Images);
          EncounterPopulateVitals(data.Encounter);
          QuizUpdateWithRoutes(data.EncounterRoutes); // Update quiz with new routes
        })
        .catch(error => console.error('Error fetching encounter data:', error));
    }

    function EncounterPopulateRoutes(encounterRoutes) { // create a button for each Route available in this encounter
      encounterRoutes.forEach(route => {
        addEncounterChoiceHTML(route.ID, route.Title, route.RelID_Encounter_Receiving);
      });
    }

    function EncounterPopulateImages(encounter, images) { // display the images from the encounter data on the page
      // console.log(encounter, images);
      // Directly use field names from the encounter object
      ['ImageBackdrop', 'ImageCharacter1', 'ImageCharacter2'].forEach(field => {
        const imageId = encounter[field]; // Get the image ID from the Encounter
        const image = images.find(img => img.ID === imageId); // Find the corresponding image

        const imageDisplaySpan = document.getElementById(field);
        if (image && imageDisplaySpan) {
          const imageDestination = GetImagePath(field); // Determine the path for the image
          imageDisplaySpan.innerHTML = '<img src="' + imageDestination + '/' + image.FileNameServer + '" class="EncounterImagePreview"/>';
        } else if (imageDisplaySpan) {
          imageDisplaySpan.innerHTML = ''; // Clear the display span if no image is found
        }
      });
    }

    function EncounterPopulateVitals(encounter) { // displays title and description from current encounter
      if (!encounter) {
        console.error('No encounter data provided');
        return;
      }
      // console.log(encounter);
      // Update the fields with data from the encounter
      const titleField = document.getElementById('EncounterTitle');
      const descriptionField = document.getElementById('EncounterDescription');
      const Character1 = document.getElementById('ImageCharacter1');
      const Character2 = document.getElementById('ImageCharacter2');
      const Backdrop = document.getElementById('ImageBackdrop');

      if (titleField && descriptionField) {
        titleField.value = encounter.Title || ''; // Set to empty string if Title is null
        descriptionField.value = encounter.Description || ''; // Set to empty string if Description is null
        Character1.innerHTML = encounter.Character1Image; // Set to empty string if Description is null
        Character2.innerHTML = encounter.Character2Image; // Set to empty string if Description is null
        Backdrop.innerHTML = encounter.BackdropImage; // Set to empty string if Description is null
      } else {
        console.error('Encounter fields not found');
      }

      // Set the global variable
      window.EncounterActiveID = encounter.ID || null;
    }


    // Story Line -> Encounter: Update Current
    function GetImagePath(imageType) { // helper function to determine the storage path of types of images
      imageType = imageType.replace(/\d+$/, '');
      switch (imageType) {
        case "ImageBackdrop":
          return "/images/uploads/backdrops";
        case "ImageCharacter":
          return "/images/uploads/characters";
        case "ImageBadge":
          return "/images/uploads/badges";
      }
    }

    function EncounterFetchUnlinked(buttonElement, RouteID) { // retrieve a list of encounters that aren't linked to from anywhere. calls EncounterDisplayUnlinked()

      fetch('/unlinked-encounters')
        .then(response => response.json())
        .then(data => {
          EncounterDisplayUnlinked(data, RouteID);
        })
        .catch(error => console.error('Error:', error));
    }

    function EncounterDisplayUnlinked(encounterList, RouteID) { // displays a list of encounters for selection.
      // Create the modal container
      let modal = document.createElement('div');
      modal.className = 'modal';

      // Create the modal content container
      let modalContent = document.createElement('div');
      modalContent.className = 'modal-content';

      // Add close button
      let closeButton = document.createElement('button');
      closeButton.className = 'close-button';
      closeButton.textContent = 'Close';
      closeButton.onclick = function() {
        modal.remove();
      };
      modalContent.appendChild(closeButton);


      // add the list items
      encounterList.forEach(encounter => {
        let listItem = document.createElement('div');
        listItem.className = 'modal-list-item';
        listItem.textContent = encounter.Title;
        listItem.onclick = function() {
          // handle item selection
          RouteSetReceivingEncounter(encounter, RouteID);
          modal.remove();
        };
        modalContent.appendChild(listItem);
      });

      modal.appendChild(modalContent);
      document.body.appendChild(modal);
    }

    function EncounterUpdateField(fieldName, value) { // updates a field in the encounters table

      let dbc = document.getElementById(fieldName).getAttribute('data-dbc');
      console.log('Save the Encounter Field');

      let updateData = {
        id: window.EncounterActiveID,
        field: dbc,
        value: value
      };

      fetch('/update-encounter-field', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        })
        .then(response => response.json())
        .then(data => {
          console.log(data.message);
          // Handle UI updates or notifications
        })
        .catch(error => console.error('Error:', error));
    }

    function EncounterUpdateFieldByColumn(Column, value) { // updates a field in the encounters table

      console.log('Save the Encounter Field');

      let updateData = {
        id: window.EncounterActiveID,
        field: Column,
        value: value
      };

      fetch('/update-encounter-field', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(updateData)
        })
        .then(response => response.json())
        .then(data => {
          console.log(data.message);
          // Handle UI updates or notifications
        })
        .catch(error => console.error('Error:', error));
    }


    // Generic
    function NavigationDisplayPane(ContentName) { // Top navigation
      console.log(ContentName);
      // Divs
      const BadgesDiv = document.getElementById('BadgesWindow');
      const livePollingDiv = document.getElementById('LivePolling');
      const chatWindowDiv = document.getElementById('ChatWindow');
      const StoryLineDiv = document.getElementById('StoryLine');
      const CharactersDiv = document.getElementById('CharacterModelsWindow');
      const BackdropsDiv = document.getElementById('BackdropsWindow');
      if (ContentName === "LivePolling") {
        livePollingDiv.style.display = "inline-flex"; // Show LivePolling
        chatWindowDiv.style.display = "none"; // Hide ChatWindow
        StoryLineDiv.style.display = "none"; // Hide StoryLine
        BadgesDiv.style.display = "none"; // Hide Badge
        CharactersDiv.style.display = "none"; // Show Badge
        BackdropsDiv.style.display = "none"; // Show Badge
      } else if (ContentName === "ChatWindow") {
        livePollingDiv.style.display = "none"; // Hide LivePolling
        StoryLineDiv.style.display = "none"; // Hide StoryLine
        chatWindowDiv.style.display = "inline-flex"; // Show ChatWindow
        BadgesDiv.style.display = "none"; // Hide Badge
        CharactersDiv.style.display = "none"; // Show Badge
        BackdropsDiv.style.display = "none"; // Show Badge
      } else if (ContentName === "StoryLine") {
        livePollingDiv.style.display = "none"; // Hide LivePolling
        chatWindowDiv.style.display = "none"; // Hide StoryLine
        StoryLineDiv.style.display = "inline-flex"; // Show ChatWindow
        BadgesDiv.style.display = "none"; // Hide Badge
        CharactersDiv.style.display = "none"; // Show Badge
        BackdropsDiv.style.display = "none"; // Show Badge
      } else if (ContentName === "Badges") {
        livePollingDiv.style.display = "none"; // Hide LivePolling
        chatWindowDiv.style.display = "none"; // Hide StoryLine
        StoryLineDiv.style.display = "none"; // Hide ChatWindow
        BadgesDiv.style.display = "inline-flex"; // Show Badge
        CharactersDiv.style.display = "none"; // Show Badge
        BackdropsDiv.style.display = "none"; // Show Badge
      } else if (ContentName === "Characters") {
        livePollingDiv.style.display = "none"; // Hide LivePolling
        chatWindowDiv.style.display = "none"; // Hide StoryLine
        StoryLineDiv.style.display = "none"; // Hide ChatWindow
        BadgesDiv.style.display = "none"; // Show Badge
        CharactersDiv.style.display = "inline-flex"; // Show Badge
        BackdropsDiv.style.display = "none"; // Show Badge
      } else if (ContentName === "Backdrops") {
        livePollingDiv.style.display = "none"; // Hide LivePolling
        chatWindowDiv.style.display = "none"; // Hide StoryLine
        StoryLineDiv.style.display = "none"; // Hide ChatWindow
        BadgesDiv.style.display = "none"; // Show Badge
        CharactersDiv.style.display = "none"; // Show Badge
        BackdropsDiv.style.display = "inline-flex"; // Show Badge
      }
    }

    function NotifyUser(NotificationText) { // display a notification to the user that slides up from the bottom
      // Update the text
      document.getElementById('UserNotificationText').textContent = NotificationText;

      // Show the notification bar
      const notificationBar = document.getElementById('notificationBar');
      notificationBar.style.bottom = '0px'; // Changed from top to bottom

      // Hide the notification bar after 5 seconds
      setTimeout(() => {
        notificationBar.style.bottom = '-50px'; // Changed from top to bottom
      }, 3000);
    }


    // File Uploads
    function FileUploadRouter(inputElement) { // routes the uploading file to the right function
      console.log(inputElement);
      let encountersField = inputElement.getAttribute('data-dbc');
      switch (encountersField) {
        case 'ImageBadge':
          BadgeFileUploadImage(inputElement);
          break;
        case 'ImageCharacter':
          CharacterFileUploadImage(inputElement);
          break;
        case 'ImageBackdrop':
          BackdropFileUploadImage(inputElement);
          break;
          // Optionally, add a default case to handle unexpected values
        default:
          console.error('Unknown encounters field:', encountersField);
          // Handle the error appropriately
          break;
      }
    }

    function EncounterFileUploadImage(inputElement) { // Upload an image and enter it into the encounter appropriately.

      // this has unneeded code in it sent to the server twice. I didn't update the server yet because I'm lazy. there's no list to put it on. sorry.
      file = inputElement.files[0];
      let EncountersField = inputElement.getAttribute('data-dbc'); // double use as the span id that contains the image
      console.log('SpanID: ' + EncountersField + "  -----  Column: " + EncountersField + "  -----  ImageType: " + ImageType)
      let ImageDisplaySpan = document.getElementById(EncountersField);
      let formData = new FormData();
      formData.append('image', file);
      formData.append('ImageType', EncountersField.replace(/\d+$/, '')); // remove trailing digits
      formData.append('userSub', window.userSub); // Include userSub in the formData
      formData.append('EncounterID', window.EncounterActiveID);
      formData.append('EncountersField', EncountersField); // this is the Table Column

      // returns the path this image type should be saved in
      let imageDestination = GetImagePath(EncountersField.replace(/\d+$/, ''));
      fetch(imageDestination, {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          let uploadedFileName = data.fileName;
          let ImageID = data.ImageID;
          // show the image
          NotifyUser(uploadedFileName + " has been uploaded.")
          ImageDisplaySpan.innerHTML = '<img src = "' + imageDestination + '/' + uploadedFileName + '"  class="EncounterImagePreview" data-imgid="' + ImageID + '"/>';
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    function BadgeFileUploadImage(inputElement) { // Upload an image and enter it into the encounter appropriately.

      // send the file to the server along with the userSub
      file = inputElement.files[0];
      let formData = new FormData();
      formData.append('image', file);
      formData.append('userSub', window.userSub); // Include userSub in the formData

      // returns the path this image type should be saved in
      let imageDestination = GetImagePath(inputElement.getAttribute('data-dbc'));
      fetch(imageDestination, {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          let uploadedFileName = data.fileName;
          let BadgeID = data.BadgeID;
          // show the image
          BadgeLoad(BadgeID);
          NotifyUser("New bad with ID: " + BadgeID + " has been created.");
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    function CharacterFileUploadImage(inputElement) { // Upload an image and enter it into the encounter appropriately.
      console.log(inputElement);
      // send the file to the server along with the userSub
      file = inputElement.files[0];
      let formData = new FormData();
      formData.append('image', file);
      formData.append('userSub', window.userSub); // Include userSub in the formData

      // returns the path this image type should be saved in
      let imageDestination = GetImagePath(inputElement.getAttribute('data-dbc'));
      fetch(imageDestination, {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          let uploadedFileName = data.fileName;
          let BadgeID = data.CharacterID;
          // show the image
          CharacterLoad(BadgeID);
          NotifyUser("New character with ID: " + BadgeID + " has been created.");
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    function BackdropFileUploadImage(inputElement) { // Upload an image and enter it into the encounter appropriately.
      console.log(inputElement);
      // send the file to the server along with the userSub
      file = inputElement.files[0];
      let formData = new FormData();
      formData.append('image', file);
      formData.append('userSub', window.userSub); // Include userSub in the formData

      // returns the path this image type should be saved in
      let imageDestination = GetImagePath(inputElement.getAttribute('data-dbc'));
      fetch(imageDestination, {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          let uploadedFileName = data.fileName;
          let BadgeID = data.CharacterID;
          // show the image
          BackdropLoad(BadgeID);
          NotifyUser("New backdrop with ID: " + BadgeID + " has been created.");
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    // Test functions
    function SelectCharacter(CharacterSlot) {
      // retrieve all character info
      let CharacterSpan = document.getElementById('ImageCharacter' + CharacterSlot);

      fetch('/GetAllCharacterData') // Replace with your actual endpoint
        .then(response => response.json())
        .then(data => {
          createDisplayDialog(data, "characters", (selection) => {
            let imageDestination = GetImagePath('ImageCharacter');

            // This will now be the fileName from the server
            let uploadedFileName = selection.FileNameServer;

            // This will be the ID from the selection object
            let ImageID = selection.ID;

            // show the image
            CharacterSpan.innerHTML = '<img src="' + imageDestination + '/' + uploadedFileName + '" class="EncounterImagePreview" data-imgid="' + ImageID + '"/>';

            // update the image we're going to be using for the encounter
            EncounterUpdateFieldByColumn('ImageCharacter' + CharacterSlot, ImageID)

            console.log('Selected character ID:', ImageID, 'FileNameServer:', uploadedFileName);
          });
        })
        .catch(error => console.error('Error:', error));
    }

    function SelectBackdrop() {
      // retrieve all character info
      let CharacterSpan = document.getElementById('ImageBackdrop');

      fetch('/GetAllBackdropData') // Replace with your actual endpoint
        .then(response => response.json())
        .then(data => {
          createDisplayDialog(data, "backdrops", (selection) => {
            let imageDestination = GetImagePath('ImageBackdrop');

            // This will now be the fileName from the server
            let uploadedFileName = selection.FileNameServer;

            // This will be the ID from the selection object
            let ImageID = selection.ID;

            // show the image
            CharacterSpan.innerHTML = '<img src="' + imageDestination + '/' + uploadedFileName + '" class="EncounterImagePreview" data-imgid="' + ImageID + '"/>';

            // update the image we're going to be using for the encounter
            EncounterUpdateFieldByColumn('ImageBackdrop', ImageID);

            console.log('Selected Backdrop ID:', ImageID, 'FileNameServer:', uploadedFileName);
          });
        })
        .catch(error => console.error('Error:', error));
    }

    function createDisplayDialog(items, ImageType, onSelect) {
      // Create the modal container
      let modal = document.createElement('div');
      modal.className = 'modal';

      // Create the modal header
      let modalHeader = document.createElement('div');
      modalHeader.className = 'modal-header';

      // Add close button to the header
      let closeButton = document.createElement('button');
      closeButton.className = 'close-button';
      closeButton.textContent = '×'; // Unicode character for 'X'
      closeButton.onclick = () => modal.remove();
      modalHeader.appendChild(closeButton);

      // Create the modal content container
      let modalContent = document.createElement('div');
      modalContent.className = 'modal-content';

      // Add items to the modal content
      items.forEach(item => {
        let listItem = document.createElement('div');
        listItem.className = 'badge-item'; // Reuse your badge item class

        if (item.FileName) {
          let image = document.createElement('img');
          image.src = 'images/uploads/' + ImageType + '/' + item.FileName; // Adjust path as needed
          image.className = 'badge-thumbnail'; // Use your image view class
          listItem.appendChild(image);
        }

        let title = document.createElement('span');
        title.className = 'badge-title'; // Reuse your badge title class
        title.textContent = item.Title;
        listItem.appendChild(title);

        listItem.onclick = () => {
          onSelect({
            ID: item.ID,
            FileNameServer: item.FileName // Change to match your actual property name
          });
          modal.remove();
        };

        modalContent.appendChild(listItem);
      });

      // Append the header and content to the modal
      modal.appendChild(modalHeader);
      modal.appendChild(modalContent);

      // Append the modal to the body
      document.body.appendChild(modal);
    }

    document.addEventListener('DOMContentLoaded', () => {
      console.log("DOM fully loaded and parsed");


      socket = io('https://www.viralvalor.com/');
      socket.on('connect', () => {
        socket.emit('new admin user', {
          sub: window.userSub
        });
      });
      //#region Chat and Live Polling
      socket.on('update success', () => { // poll question update success
        NotifyUser("Live Poll updated.")
      });
      socket.on('results updated', (percentages, totalVotes) => { // poll results to pass to the chart
        QuizChartUpdate(percentages, totalVotes); // Pass the correct answer index
        globalResults = percentages;
      });
      socket.on('TravelToID', (EncounterID) => { // notification from the server to travel to encounterID
        console.log('display route ID: ' + EncounterID)
        EncounterLoad(EncounterID); // Load the encounter
        NotifyUser("Encounter update complete.")
      });
      setInterval(() => { // request updated chart every half second
        socket.emit('request results'); // check results every .5 seconds
      }, 1000);

      // Define Constants
      // Buttons
      QuizSendBtn = document.getElementById('QuizSendBtn');
      QuizEndBtn = document.getElementById('QuizEndBtn');
      QuizUpdateBtn = document.getElementById('QuizUpdateBtn');
      NavigationLivePollBtn = document.getElementById('NavigationLivePollBtn');
      NavigationChatBtn = document.getElementById('NavigationChatBtn');
      NavigationBadgesBtn = document.getElementById('NavigationBadgesBtn');
      NavigationCharactersBtn = document.getElementById('NavigationCharactersBtn');
      NavigationBackdropsBtn = document.getElementById('NavigationBackdropsBtn');
      FileEncounterBackdropUpload = document.getElementById('FileEncounterBackdropUpload');
      CharacterImageUpload = document.getElementById('CharacterImageUpload');
      BadgeImageUpload = document.getElementById('BadgeImageUpload');
      BackdropImageUpload = document.getElementById('BackdropImageUpload');
      // CharacterTitle = document.getElementById('CharacterTitle');
      // FileEncounterBackdropSelect = document.getElementById("showImagesBtn"); // this is for the popup existing div thing


      // Prepare Event Listeners
      NavigationBadgesBtn.addEventListener('click', () => NavigationDisplayPane("Badges"));
      NavigationCharactersBtn.addEventListener('click', () => NavigationDisplayPane("Characters"));
      NavigationChatBtn.addEventListener('click', () => NavigationDisplayPane("ChatWindow"));
      NavigationLivePollBtn.addEventListener('click', () => NavigationDisplayPane("LivePolling"));
      NavigationStoryLineBtn.addEventListener('click', () => NavigationDisplayPane("StoryLine"));
      NavigationBackdropsBtn.addEventListener('click', () => NavigationDisplayPane("Backdrops"));

      CharacterImageUpload.addEventListener('change', function() {
        FileUploadRouter(this);
      });
      BadgeImageUpload.addEventListener('change', function() {
        FileUploadRouter(this);
      });
      BackdropImageUpload.addEventListener('change', function() {
        FileUploadRouter(this);
      });
      QuizEndBtn.addEventListener('click', QuizEnd);
      QuizSendBtn.addEventListener('click', QuizSend);
      QuizUpdateBtn.addEventListener('click', QuizUpdate);
      document.getElementById('QuizAddOptionBtn').addEventListener('click', QuizAddOption);

      document.getElementById("EncounterForm").addEventListener("change", function(event) {
        let Element = event.target;
        let ElementType = Element.tagName.toLowerCase();
        let FieldName = Element.id;
        console.log(FieldName);
        let Value;

        switch (ElementType) {
          case 'input':
            switch (Element.type) {
              // TODO INTEGRATE THIS WITH THE IMAGE UPLOAD FUNCTION TO MAKE A GENERIC ONE WHEN YOU CAN
              // case 'file':
              //   return;
              case 'text':
                console.log('text');
                console.log(Element);
                console.log(Element.value);
                // Other input types can be added similarly
                Value = Element.value;
                break;
                // Add cases for other input types
            }
            break;
          case 'textarea':
            Value = Element.value;
            break;
          case 'select':
            Value = Element.options[Element.selectedIndex].value;
            break;
            // Add cases for other element types
        }
        EncounterUpdateField(FieldName, Value);
      });
      document.getElementById("BadgeForm").addEventListener("change", function(event) {
        let Element = event.target;
        let ElementType = Element.tagName.toLowerCase();
        let FieldName = Element.id;
        console.log(FieldName);
        let Value;

        switch (ElementType) {
          case 'input':
            switch (Element.type) {
              // TODO INTEGRATE THIS WITH THE IMAGE UPLOAD FUNCTION TO MAKE A GENERIC ONE WHEN YOU CAN
              // case 'file':
              //   return;
              case 'text':
                console.log('text');
                console.log(Element);
                console.log(Element.value);
                // Other input types can be added similarly
                Value = Element.value;
                break;
                // Add cases for other input types
            }
            break;
          case 'textarea':
            Value = Element.value;
            break;
          case 'select':
            Value = Element.options[Element.selectedIndex].value;
            break;
            // Add cases for other element types
        }
        BadgeUpdateField(FieldName, Value);
      });
      document.getElementById("CharacterForm").addEventListener("change", function(event) {
        console.log("CharacterForm change event triggered");
        let Element = event.target;
        let ElementType = Element.tagName.toLowerCase();
        let FieldName = Element.id;
        console.log(FieldName);
        let Value;

        switch (ElementType) {
          case 'input':
            switch (Element.type) {
              // TODO INTEGRATE THIS WITH THE IMAGE UPLOAD FUNCTION TO MAKE A GENERIC ONE WHEN YOU CAN
              // case 'file':
              //   return;
              case 'text':
                console.log('text');
                console.log(Element);
                console.log(Element.value);
                // Other input types can be added similarly
                Value = Element.value;
                break;
                // Add cases for other input types
            }
            break;
          case 'textarea':
            Value = Element.value;
            break;
          case 'select':
            Value = Element.options[Element.selectedIndex].value;
            break;
            // Add cases for other element types
        }
        CharacterUpdateField(FieldName, Value);
      });
 
      document.getElementById("BackdropForm").addEventListener("change", function(event) {
        console.log("BackdropForm change event triggered");
        let Element = event.target;
        let ElementType = Element.tagName.toLowerCase();
        let FieldName = Element.id;
        console.log(FieldName);
        let Value;

        switch (ElementType) {
          case 'input':
            switch (Element.type) {
              // TODO INTEGRATE THIS WITH THE IMAGE UPLOAD FUNCTION TO MAKE A GENERIC ONE WHEN YOU CAN
              // case 'file':
              //   return;
              case 'text':
                console.log('text');
                console.log(Element);
                console.log(Element.value);
                // Other input types can be added similarly
                Value = Element.value;
                break;
                // Add cases for other input types
            }
            break;
          case 'textarea':
            Value = Element.value;
            break;
          case 'select':
            Value = Element.options[Element.selectedIndex].value;
            break;
            // Add cases for other element types
        }
        BackdropUpdateField(FieldName, Value);
      });
 
    });
  </script>
</body>

</html>